{#
/**
 * @file
 * Theme override to display a node.
 *
 * Available variables:
 * - node: The node entity with limited access to object properties and methods.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - node.getCreatedTime() will return the node creation timestamp.
 *   - node.hasField('field_example') returns TRUE if the node bundle includes
 *     field_example. (This does not indicate the presence of a value in this
 *     field.)
 *   - node.isPublished() will return whether the node is published or not.
 *   Calling other methods, such as node.delete(), will result in an exception.
 *   See \Drupal\node\Entity\Node for a full list of public properties and
 *   methods for the node object.
 * - label: The title of the node.
 * - content: All node items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - author_picture: The node author user entity, rendered using the "compact"
 *   view mode.
 * - metadata: Metadata for this node.
 * - date: Themed creation date field.
 * - author_name: Themed author name field.
 * - url: Direct URL of the current node.
 * - display_submitted: Whether submission information should be displayed.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - node: The current template type (also known as a "theming hook").
 *   - node--type-[type]: The current node type. For example, if the node is an
 *     "Article" it would result in "node--type-article". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - node--view-mode-[view_mode]: The View Mode of the node; for example, a
 *     teaser would result in: "node--view-mode-teaser", and
 *     full: "node--view-mode-full".
 *   The following are controlled through the node publishing options.
 *   - node--promoted: Appears on nodes promoted to the front page.
 *   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
 *     teaser listings.
 *   - node--unpublished: Appears on unpublished nodes visible only to site
 *     admins.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - author_attributes: Same as attributes, except applied to the author of
 *   the node tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 * - readmore: Flag for more state. Will be true if the teaser content of the
 *   node cannot hold the main body content.
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_node()
 *
 * @todo Remove the id attribute (or make it a class), because if that gets
 *   rendered twice on a page this is invalid CSS for example: two lists
 *   in different view modes.
 */
#}
{# {%
set classes = [
'node',
'node--type-' ~ node.bundle|clean_class,
not node.isPublished() ? 'node--unpublished',
view_mode ? 'node--view-mode-' ~ view_mode|clean_class,
]
%} #}

{% set bem_node_block = bem_node_block|default('node') %}

{% set bem_node_element = bem_node_element|default(false) %}

{% if bem_node_modifiers is not defined %}
  {% set bem_node_modifiers = [] %}
{% endif %}
{% if bem_node_extra is not defined %}
  {% set bem_node_extra = [] %}
{% endif %}
{% set bem_node_sub_extra = bem_node_sub_extra|default([]) %}
{% set bem_node_content_extra = bem_node_content_extra|default([]) %}

{% if node %}
  {% if node.bundle %}
    {% set bundle = node.bundle %}
  {% endif %}
  {% if node.isPromoted() %}
    {% set isPromoted = node.isPromoted() %}
  {% endif %}

  {% if node.isSticky() %}
    {% set isSticky = node.isSticky() %}
  {% endif %}
{% else %}
  {# if no node, check if we got some settings passed directly #}
  {% set bundle = bundle ?? false %}
  {% set isPromoted = isPromoted ?? false %}
  {% set isSticky = isSticky ?? false %}
{% endif %}

{% if isPromoted %}
  {% set bem_node_modifiers = bem_node_modifiers|merge(['promoted']) %}
  {% set bem_node_extra = bem_node_extra|merge(['promoted']) %}
{% endif %}
{% if isSticky %}
  {% set bem_node_modifiers = bem_node_modifiers|merge(['sticky']) %}
  {% set bem_node_extra = bem_node_extra|merge(['sticky']) %}
{% endif %}
{% if view_mode %}
  {% set bem_node_modifiers = bem_node_modifiers|merge(['view-mode-' ~ view_mode|clean_class|replace({'_': '-'})]) %}
{% endif %}
{% if bundle %}
  {% set bem_node_modifiers = bem_node_modifiers|merge([bundle|clean_class|replace({'_': '-'})]) %}
{% endif %}
{% if bundle and view_mode %}
  {% set bem_node_modifiers = bem_node_modifiers|merge([bundle|clean_class|replace({'_': '-'}) ~ '--' ~ view_mode|clean_class|replace({'_': '-'})]) %}
  {% set bem_node_extra = bem_node_extra|merge([bundle|clean_class|replace({'_': '-'}) ~ '--' ~ view_mode|clean_class|replace({'_': '-'})]) %}
  {% set bem_node_sub_extra = bem_node_sub_extra|merge([bundle|clean_class|replace({'_': '-'}) ~ '__submitted' ~ '--' ~ view_mode|clean_class|replace({'_': '-'})]) %}
{% endif %}

{# {{ attach_library('classy/node') }} #}
{# <article{{ attributes.addClass(classes) }}> #}
<article {{ bem(bem_node_block, bem_node_element, bem_node_modifiers, bem_node_extra) }}>
  {{ title_prefix }}
  {% if not page %}
    {# <h2{{ title_attributes }}>
      <a href="{{ url }}" rel="bookmark">{{ label }}</a>
    </h2> #}
    {% include "@%theme_prefix%-atoms/02-text/00-headings/_heading.twig" with {
      "heading_level": 2,
      "heading": label,
      "heading_link_attributes": {
        'rel': 'bookmark'
      }
    } %}
  {% endif %}
  {{ title_suffix }}

  {% if display_submitted %}
    <footer class="node__meta">
      {{ author_picture }}
      {% if author_attributes.class %} {% set bem_node_sub_extra = bem_node_sub_extra|merge(author_attributes.class) %} {% endif %}
      {# because 'attributes' method doesn't work in styleguide, as part of BEM or standalone, we need to pass the attributes manually#}
      <div {{ bem(bem_node_block, 'submitted', bem_node_modifiers, bem_node_sub_extra, author_attributes) }}>
        {# {{ 'Submitted by' ~ ' ' ~ author_name ~ ' ' ~ 'on' ~ ' ' ~ date | t }} #}
        {#{ author_name }} {{ 'on' | t }} {{ date }#}
        {{ 'Submitted by' | t }} {{author_name}} {{'on' | t}} {{ date }}

        {{ metadata }}
      </div>
    </footer>
  {% endif %}

  {% if content_attributes.class %} {% set bem_node_content_extra = bem_node_content_extra|merge(content_attributes.class) %} {% endif %}

  {# because 'attributes' method doesn't work in styleguide, as part of BEM or standalone, we need to pass the attributes manually#}
  <div {{ bem(bem_node_block, 'content', bem_node_modifiers, bem_node_content_extra, content_attributes) }}>
    {% block node_content %}
    {{ content }}
    {% endblock %}
  </div>

</article>
