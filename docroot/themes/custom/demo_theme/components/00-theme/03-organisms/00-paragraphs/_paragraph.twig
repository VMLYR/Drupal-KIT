{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   - id: The paragraph ID.
 *   - bundle: The type of the paragraph, for example, "image" or "text".
 *   - authorid: The user ID of the paragraph author.
 *   - createdtime: Formatted creation date. Preprocess functions can
 *     reformat it by calling \Drupal::service('date.formatter')->format() with the desired parameters on
 *     $variables['paragraph']->getCreatedTime().
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}

{# {%
set classes = [
  paragraph.bundle|clean_class,
]
%}
{% block paragraph %}
  <div{{ attributes.addClass(classes) }}>
    {% block paragraph_content %}
      {{ content }}
    {% endblock %}
  </div>
{% endblock paragraph %} #}


{#
  Set BEM classes using a function:
  bem(element, modifiers = array(), block, extra = array())
#}

{% set bem_p_block = bem_p_block|default('paragraph') %}

{% set bem_p_element = bem_p_element|default(false) %}

{% if bem_p_modifiers is not defined %}
  {% set bem_p_modifiers = [] %}
{% endif %}

{% if node.isPromoted() %}{% set bem_p_modifiers = bem_p_modifiers|merge(['promoted']) %}{% endif %}
{% if node.isSticky() %}{% set bem_p_modifiers = bem_p_modifiers|merge(['sticky']) %}{% endif %}
{% if view_mode %}{% set bem_p_modifiers = bem_p_modifiers|merge(['view-mode-' ~ view_mode|clean_class|replace({'_': '-'})]) %}{% endif %}
{% if paragraph.bundle %}{% set bem_p_modifiers = bem_p_modifiers|merge(['type-' ~ paragraph.bundle|clean_class|replace({'_': '-'})]) %}{% endif %}
{% if type %}{% set bem_p_modifiers = bem_p_modifiers|merge(['type-' ~ type|clean_class|replace({'_': '-'})]) %}{% endif %}

{% if bem_p_extra is not defined %}
  {% set bem_p_extra = [] %}
{% endif %}

{% block paragraph %}
<div {{ bem(bem_p_block, bem_p_element, bem_p_modifiers, bem_p_extra) }}>
  {{ title_prefix }}
  {{ title_suffix }}
  {% block paragraph_content %}
    {{ content }}
  {% endblock %}
</div>
{% endblock paragraph %}
